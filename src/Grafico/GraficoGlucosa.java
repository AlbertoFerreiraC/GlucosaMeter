/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Grafico;

import Conexion.Conexion;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import org.hid4java.HidDevice;
import org.hid4java.HidManager;
import org.hid4java.HidServices;

/**
 *
 * @author Usuario
 */
public class GraficoGlucosa extends javax.swing.JFrame {

    DefaultTableModel mt = new DefaultTableModel();

    /**
     * Creates new form GraficoGlucosa
     */
    private static final byte[] INIT_COMMAND = {0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    private static final byte[] REQUEST_DATA = {0x51, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    private static final int PACKET_SIZE = 64;

    private HidServices hidServices;
    private HidDevice hidDevice;

    // Definición de la clase GlucoseReading como clase estática interna
    private static class GlucoseReading {

        int id;
        Date timestamp;
        int value;

        GlucoseReading(int id, Date timestamp, int value) {
            this.id = id;
            this.timestamp = timestamp;
            this.value = value;
        }
    }

    public GraficoGlucosa() {
        initComponents();
        setLocationRelativeTo(null);
         // Configurar el modelo de tabla con el tipo correcto para la columna del checkbox
        String[] columnNames = {"Seleccionar", "Id", "Fecha de Lectura", "Nivel de glucosa mg/dl"};
        mt = new DefaultTableModel(columnNames, 0) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                // Especificar que la primera columna es de tipo Boolean
                if (columnIndex == 0) {
                    return Boolean.class;
                }
                return Object.class;
            }
            
            @Override
            public boolean isCellEditable(int row, int column) {
                // Solo permitir edición en la columna del checkbox
                return column == 0;
            }
        };

        tableModel.setModel(mt);
        
        // Configurar el renderizador para la columna del checkbox
        tableModel.getColumnModel().getColumn(0).setPreferredWidth(45);
        tableModel.getColumnModel().getColumn(0).setResizable(false);


        // Inicializar HID y configurar eventos
        initializeHID();
        setupEventHandlers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        insertButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        readButton = new javax.swing.JButton();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableModel = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Grafico/DiseñoLogo.jpg"))); // NOI18N

        insertButton.setBackground(new java.awt.Color(204, 204, 204));
        insertButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        insertButton.setText("Insertar");
        insertButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Estado:");

        statusLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        statusLabel.setText("Desconectado");

        readButton.setBackground(new java.awt.Color(204, 204, 204));
        readButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        readButton.setText("Leer");
        readButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        jInternalFrame1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jInternalFrame1.setVisible(true);

        tableModel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 3", "Title 4", "Título 4", "Título 5"
            }
        ));
        tableModel.setAutoscrolls(false);
        jScrollPane1.setViewportView(tableModel);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jButton5.setBackground(new java.awt.Color(204, 204, 204));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setText("Salir");
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(204, 204, 204));
        btnActualizar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnActualizar.setText("Actualizar");
        btnActualizar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel9.setText("Sistema Medicion de Glucosa");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(readButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(readButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)))
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        insertSelectedReadings();
    }//GEN-LAST:event_insertButtonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        readGlucoseData();
    }//GEN-LAST:event_readButtonActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        actualizarDatos();
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraficoGlucosa.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraficoGlucosa.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraficoGlucosa.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraficoGlucosa.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraficoGlucosa().setVisible(true);
            }
        });
    }

    private void initializeHID() {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                hidServices = HidManager.getHidServices();
                hidServices.start();

                int vendorId = 0x1a79;
                int productId = 0x7410;
                hidDevice = hidServices.getHidDevice(vendorId, productId, null);
                return null;
            }

            @Override
            protected void done() {
                if (hidDevice != null) {
                    statusLabel.setText("Conectado");
                    readButton.setEnabled(true);
                }
            }
        }; /*Prueba para push*/

        worker.execute();
    }

    private void setupEventHandlers() {
        readButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                readGlucoseData();
            }
        });

        insertButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                insertSelectedReadings();
            }
        });
        readButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                readGlucoseData();
            }
        });

        insertButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                insertSelectedReadings();
            }
        });

        btnActualizar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                actualizarDatos();
            }
        });
    }

    private void readGlucoseData() {
        readButton.setEnabled(false);
        statusLabel.setText("Leyendo...");

        SwingWorker<List<GlucoseReading>, Void> worker = new SwingWorker<List<GlucoseReading>, Void>() {
            @Override
            protected List<GlucoseReading> doInBackground() throws Exception {
                List<GlucoseReading> readings = new ArrayList<>();
                if (hidDevice != null && hidDevice.open()) {
                    try {
                        // Enviar comandos y leer datos
                        sendCommand(INIT_COMMAND);
                        Thread.sleep(1000);
                        sendCommand(REQUEST_DATA);

                        byte[] response = readResponse();
                        if (response != null) {
                            readings = processData(response);
                        }
                    } finally {
                        hidDevice.close();
                    }
                }
                return readings;
            }

            @Override
            protected void done() {
                try {
                    List<GlucoseReading> readings = get();
                    updateTable(readings);
                    statusLabel.setText("Conectado");
                    insertButton.setEnabled(true);
                } catch (Exception e) {
                    statusLabel.setText("Error");
                    e.printStackTrace();
                }
                readButton.setEnabled(true);
            }
        };
        worker.execute();
    }

    private boolean sendCommand(byte[] command) throws Exception {
        byte[] packet = new byte[PACKET_SIZE];
        System.arraycopy(command, 0, packet, 0, command.length);
        return hidDevice.write(packet, packet.length, (byte) 0x00) >= 0;
    }

    private byte[] readResponse() {
        byte[] response = new byte[PACKET_SIZE];
        return hidDevice.read(response, 2000) > 0 ? response : null;
    }

    private List<GlucoseReading> processData(byte[] data) {
        List<GlucoseReading> readings = new ArrayList<>();
        if (data.length >= 3) {
            int recordCount = data[2] & 0xFF;
            int offset = 3;
            for (int i = 0; i < recordCount && offset + 2 < data.length; i++) {
                int glucoseValue = ((data[offset] & 0xFF) << 8) | (data[offset + 1] & 0xFF);
                readings.add(new GlucoseReading(i + 1, new Date(), glucoseValue));
                offset += 3;
            }
        }
        return readings;
    }

    private void updateTable(List<GlucoseReading> readings) {
        DefaultTableModel model = (DefaultTableModel) tableModel.getModel();
        model.setRowCount(0);
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        for (GlucoseReading reading : readings) {
            Object[] row = {
                false,
                reading.id,
                dateFormat.format(reading.timestamp),
                reading.value
            };
            model.addRow(row);
        }
    }

    // Previous constants and fields remain the same...
    private void insertSelectedReadings() {
        List<GlucoseReading> selectedReadings = new ArrayList<>();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            Boolean isSelected = (Boolean) tableModel.getValueAt(i, 0);
            if (isSelected) {
                int id = (int) tableModel.getValueAt(i, 1);
                Date timestamp = null;
                try {
                    timestamp = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").parse((String) tableModel.getValueAt(i, 2));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                int value = (int) tableModel.getValueAt(i, 3);
                selectedReadings.add(new GlucoseReading(id, timestamp, value));
            }
        }

        Connection conn = null;
        PreparedStatement checkStmt = null;
        PreparedStatement insertStmt = null;
        PreparedStatement insertLectorStmt = null;
        int insertedCount = 0;

        try {
            conn = Conexion.getConnection();
            conn.setAutoCommit(false);

            // Verificar si el registro ya existe
            String checkSql = "SELECT COUNT(*) FROM registro_glucosa WHERE nro_registro = ? AND lectura_glucosa = ?";
            checkStmt = conn.prepareStatement(checkSql);

            // Insertar en registro_glucosa
            String insertSql = "INSERT INTO registro_glucosa (nro_registro, lectura_glucosa) VALUES (?, ?)";
            insertStmt = conn.prepareStatement(insertSql, Statement.RETURN_GENERATED_KEYS);

            // Insertar en registro_de_lector
            String insertLectorSql = "INSERT INTO registro_de_lector (nro_registro_de_lector, cantidad_lector_lectura, cantidad_despues_de_lectura) VALUES (?, ?, ?)";
            insertLectorStmt = conn.prepareStatement(insertLectorSql);

            for (GlucoseReading reading : selectedReadings) {
                // Verificar si el registro ya existe
                checkStmt.setInt(1, reading.id);
                checkStmt.setString(2, String.valueOf(reading.value));
                ResultSet rs = checkStmt.executeQuery();
                rs.next();
                int count = rs.getInt(1);

                if (count == 0) {
                    // Insertar en registro_glucosa
                    insertStmt.setInt(1, reading.id);
                    insertStmt.setString(2, String.valueOf(reading.value));
                    insertStmt.executeUpdate();

                    // Insertar en registro_de_lector
                    insertLectorStmt.setInt(1, reading.id);
                    insertLectorStmt.setInt(2, 1); // cantidad_lector_lectura
                    insertLectorStmt.setInt(3, 0); // cantidad_despues_de_lectura
                    insertLectorStmt.executeUpdate();

                    insertedCount++;
                }
            }

            conn.commit();
            JOptionPane.showMessageDialog(this,
                    "Se insertaron " + insertedCount + " nuevos registros en la base de datos.",
                    "Inserción Exitosa",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
            JOptionPane.showMessageDialog(this,
                    "Error al insertar registros: " + e.getMessage(),
                    "Error de Inserción",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } finally {
            try {
                if (checkStmt != null) {
                    checkStmt.close();
                }
                if (insertStmt != null) {
                    insertStmt.close();
                }
                if (insertLectorStmt != null) {
                    insertLectorStmt.close();
                }
                if (conn != null) {
                    conn.setAutoCommit(true);
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private void actualizarDatos() {
        JOptionPane.showMessageDialog(this, "Actualizando datos...", "Actualización", JOptionPane.INFORMATION_MESSAGE);
        readGlucoseData();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton insertButton;
    private javax.swing.JButton jButton5;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton readButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTable tableModel;
    // End of variables declaration//GEN-END:variables
}
